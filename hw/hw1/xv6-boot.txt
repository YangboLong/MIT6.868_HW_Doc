Registers:
(gdb) info reg
eax            0x0	0
ecx            0x0	0
edx            0x1f0	496
ebx            0x10074	65652
esp            0x7bdc	0x7bdc
ebp            0x7bf8	0x7bf8
esi            0x10074	65652
edi            0x0	0
eip            0x10000c	0x10000c
eflags         0x46	[ PF ZF ]
cs             0x8	8
ss             0x10	16
ds             0x10	16
es             0x10	16
fs             0x0	0
gs             0x0	0

Stack contents:
(gdb) x/24x $esp
0x7bdc:	0x00007db4	0x00000000	0x00000000	0x00000000 # 0x7bd4: return address of subroutine entry in bootmain
0x7bec:	0x00000000	0x00000000	0x00000000	0x00000000
0x7bfc:	0x00007c4d	0x8ec031fa	0x8ec08ed8	0xa864e4d0 # 0x7c4d: return address of subroutine bootmain
0x7c0c:	0xb0fa7502	0xe464e6d1	0x7502a864	0xe6dfb0fa
0x7c1c:	0x16010f60	0x200f7c78	0xc88366c0	0xc0220f01
0x7c2c:	0x087c31ea	0x10b86600	0x8ed88e00	0x66d08ec0

Q: Write a short (3-5 word) comment next to each non-zero value on the stack explaining what it is. Which part of the stack printout is actually the stack? (Hint: not all of it.)
A: Because the first/bottom element pushed in the stack is 0x7c4d after the first subroutine call (see below), the valid stack content ranges from 0x7bdc to 0x7bff.

Q: Begin by restarting qemu and gdb, and set a break-point at 0x7c00, the start of the boot block (bootasm.S). Single step through the instructions (type si at the gdb prompt). Where in bootasm.S is the stack pointer initialized? (Single step until you see an instruction that moves a value into %esp, the register for the stack pointer.)
A: The esp is initialized at line "movl $start, %esp", which copies the start address (0x7c00) of the bootloader to the stack pointer.

Q: Single step through the call to bootmain; what is on the stack now?
A: When the IP points to the bootmain subroutine, the content in the stack now is 0x7c4d, which is the next instruction address after "movl $start, %esp". By examining the bootblock.asm file, the instruction, "movl $start, %esp", is interpretted to be "bc 00 7c 00 00" and takes 5 bytes.

Q: What do the first assembly instructions of bootmain do to the stack? Look for bootmain in bootblock.asm.
A: The first instruction of bootmain, push %ebp, saves the content of %ebp (0) to the top of stack.

Q: Continue tracing via gdb (using breakpoints if necessary -- see hint below) and look for the call that changes eip to 0x10000c. What does that call do to the stack? (Hint: Think about what this call is trying to accomplish in the boot sequence and try to identify this point in bootmain.c, and the corresponding instruction in the bootmain code in bootblock.asm. This might help you set suitable breakpoints to speed things up.)
A: Set a breakpoint at 0x7dae, which is the entry point of the kernel (calling the entry() function in bootmain.c). The call saves 0x7db4 to the stack, which is the return address after calling entry() in bootmain().
